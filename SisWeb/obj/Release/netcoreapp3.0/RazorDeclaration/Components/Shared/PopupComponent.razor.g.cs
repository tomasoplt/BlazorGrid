#pragma checksum "C:\Ks\BlazorGrid\SisWeb\Components\Shared\PopupComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4c5c59e2e823d0e5ef712bc16d42f5febeb6ff0c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SisWeb.Components.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Services;
    using Microsoft.JSInterop;
    using SisWeb.Components.Shared;
    using Blazorise;
    using Core.EF.EntityFrameworkCore.Repositories;
    using SisWeb.EF.Models;
    using Core.Core.NetCore;
    public class PopupComponent : ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 64 "C:\Ks\BlazorGrid\SisWeb\Components\Shared\PopupComponent.razor"
            
    string ex = string.Empty;

    double _overlayOpacity = 0.0;

    private bool _isPopupOpen;

    public enum AnimationType
    {
        None = 0,
        FadeIn = 1
    }

    [Parameter]
    string Title { get; set; }

    [Parameter]
    private AnimationType Animation { get; set; }

    [Parameter]
    protected bool IsPopupOpen
    {
        get
        {
            return _isPopupOpen;
        }
        set
        {
            _isPopupOpen = value;
            if (_isPopupOpen)
            {
                FadeIn();
            }
        }
    }

    private async void FadeIn()
    {
        if (Animation == AnimationType.FadeIn)
        {
            await InvokeAsync(async () =>
            {
                for (double i = 0.0; i <= 0.5; i += 0.1)
                {
                    _overlayOpacity = i;
                    StateHasChanged();
                    await Task.Delay(30);
                }
            });
        }
    }

    void Close()
    {
        IsPopupOpen = false;
    }

    void Save()
    {
        // you can add some code for validation and saving the modifications here...
        // ....
        // Close the popup
        IsPopupOpen = false;
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
